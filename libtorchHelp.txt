1. Indexing

https://pytorch.org/cppdocs/notes/tensor_indexing.html

2.		//std::cout << C << std::endl;
	torch::Tensor F = torch::one_hot(torch::tensor(5), 27).to(torch::kFloat32);
	std::cout << F.t().unsqueeze(0).mm(C) << std::endl;


	std::cout << "X\n" << X[13][2] << std::endl;
	std::cout << "C\n" << C[1] << std::endl;
	std::cout << "Embeddings\n" << Embeddings[13][2] << std::endl;

	//auto t = torch::cat({ Embeddings.index({torch::indexing::Slice(), 0, torch::indexing::Slice()}),
	//					Embeddings.index({ torch::indexing::Slice(), 1, torch::indexing::Slice() }),
	//					Embeddings.index({ torch::indexing::Slice(), 2, torch::indexing::Slice() }) }, 1);

	//std::cout << "t sizes" << t.sizes() << std::endl;
	//std::cout << t << std::endl;


3.  

	//torch::Tensor counts = logits.exp();
	//torch::Tensor prob = counts / counts.sum(1, true);
	//torch::Tensor probsY = torch::zeros({ static_cast<long>(context_vector.size())}, torch::kFloat32);

	//for (int ii = 0; ii < context_vector.size(); ii++)
	//{
	//	probsY[ii] = prob.index({ ii,Y[ii] }).item<float>();
	//}

	//torch::Tensor  loss = -probsY.log().mean();

	can be replaced with

	torch::Tensor loss = torch::nn::functional::cross_entropy(logits, Y, torch::nn::functional::CrossEntropyFuncOptions().reduction(torch::kMean));


4  Learn learning rate

	auto lre = torch::linspace(-3,0,500);
			lre = torch::pow(10, lre);

			float learningRate = lre.index({ run }).item<float>();